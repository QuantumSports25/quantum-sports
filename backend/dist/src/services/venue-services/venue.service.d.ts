import { Prisma } from "@prisma/client";
import { GetVenuesParams, Venue } from "../../models/venue.model";
export declare class VenueService {
    static createVenue(venue: Venue, tx: Prisma.TransactionClient): Promise<{
        name: string;
        id: string;
        phone: string;
        createdAt: Date;
        updatedAt: Date;
        details: Prisma.JsonValue | null;
        description: string | null;
        highlight: string | null;
        location: Prisma.JsonValue;
        start_price_per_hour: Prisma.Decimal;
        cancellationPolicy: Prisma.JsonValue | null;
        images: string[];
        features: string[];
        approved: boolean;
        mapLocationLink: string | null;
        rating: Prisma.Decimal | null;
        totalReviews: number | null;
        partnerId: string;
    }>;
    static getVenue(id: string): Promise<{
        name: string;
        id: string;
        phone: string;
        createdAt: Date;
        updatedAt: Date;
        details: Prisma.JsonValue | null;
        description: string | null;
        highlight: string | null;
        location: Prisma.JsonValue;
        start_price_per_hour: Prisma.Decimal;
        cancellationPolicy: Prisma.JsonValue | null;
        images: string[];
        features: string[];
        approved: boolean;
        mapLocationLink: string | null;
        rating: Prisma.Decimal | null;
        totalReviews: number | null;
        partnerId: string;
    } | null>;
    static updateVenue(id: string, venue: Venue): Promise<{
        name: string;
        id: string;
        phone: string;
        createdAt: Date;
        updatedAt: Date;
        details: Prisma.JsonValue | null;
        description: string | null;
        highlight: string | null;
        location: Prisma.JsonValue;
        start_price_per_hour: Prisma.Decimal;
        cancellationPolicy: Prisma.JsonValue | null;
        images: string[];
        features: string[];
        approved: boolean;
        mapLocationLink: string | null;
        rating: Prisma.Decimal | null;
        totalReviews: number | null;
        partnerId: string;
    }>;
    static deleteVenue(id: string, tx: Prisma.TransactionClient): Promise<{
        name: string;
        id: string;
        phone: string;
        createdAt: Date;
        updatedAt: Date;
        details: Prisma.JsonValue | null;
        description: string | null;
        highlight: string | null;
        location: Prisma.JsonValue;
        start_price_per_hour: Prisma.Decimal;
        cancellationPolicy: Prisma.JsonValue | null;
        images: string[];
        features: string[];
        approved: boolean;
        mapLocationLink: string | null;
        rating: Prisma.Decimal | null;
        totalReviews: number | null;
        partnerId: string;
    }>;
    static getAllVenues(params: GetVenuesParams): Promise<{
        venues: {
            name: string;
            id: string;
            phone: string;
            createdAt: Date;
            updatedAt: Date;
            details: Prisma.JsonValue | null;
            description: string | null;
            highlight: string | null;
            location: Prisma.JsonValue;
            start_price_per_hour: Prisma.Decimal;
            cancellationPolicy: Prisma.JsonValue | null;
            images: string[];
            features: string[];
            approved: boolean;
            mapLocationLink: string | null;
            rating: Prisma.Decimal | null;
            totalReviews: number | null;
            partnerId: string;
        }[];
        totalCount: number;
        page: number;
        totalPages: number;
    }>;
}
//# sourceMappingURL=venue.service.d.ts.map