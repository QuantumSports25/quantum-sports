// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(255)
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  phone     String?   @db.VarChar(20)
  role      String    @default("user") @db.VarChar(20)
  otp       String?   @db.VarChar(10)
  otpExpiry DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  partnerDetails PartnerDetails?
  bookings       Booking[]

  @@map("users")
}

model PartnerDetails {
  id               String             @id @default(uuid())
  userId           String             @unique
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName      String             @db.VarChar(255)
  subscriptionType String             @db.VarChar(20)
  gstNumber        String?            @db.VarChar(20)
  websiteUrl       String?            @db.VarChar(255)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  mappings         PartnerVenueMap[]  @relation("PartnerDetailUser")

  @@map("partner_details")
}


model Venue {
  id                   String            @id @default(uuid())
  name                 String            @db.VarChar(255)
  description          String?           @db.Text
  highlight            String?           @db.VarChar(255)
  location             Json              @db.JsonB
  start_price_per_hour Decimal           @db.Decimal(10, 2)
  details              Json?             @db.JsonB
  cancellationPolicy   Json?             @db.JsonB
  images               String[]          
  features             String[]          @db.VarChar(255)
  approved             Boolean           @default(false)
  mapLocationLink      String?           @db.Text
  phone                String            @db.VarChar(20)
  rating               Decimal?          @db.Decimal(2, 1)
  totalReviews         Int?              @default(0)
  partnerId            String            @db.VarChar(255)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  PartnerVenueMap      PartnerVenueMap[]
  activities           Activity[]

  @@map("venues")
}

model PartnerVenueMap {
  id              String @id @default(uuid())
  partnerDetailId String
  venueId         String

  // Reference the `userId` in PartnerDetails
  partnerDetails PartnerDetails @relation("PartnerDetailUser", fields: [partnerDetailId], references: [userId], onDelete: Cascade)
  venue          Venue          @relation(fields: [venueId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([partnerDetailId, venueId])
  @@map("partner_venue_map")
}

model Activity {
  id                   String     @id @default(uuid())
  name                 String     @db.VarChar(255)
  tags                 String[]   @db.VarChar(100)
  venueId              String
  start_price_per_hour Decimal    @db.Decimal(10, 2)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  venue                Venue      @relation(fields: [venueId], references: [id], onDelete: Cascade)
  facilities           Facility[]

  @@map("activities")
}

model Facility {
  id                   String   @id @default(uuid())
  name                 String   @db.VarChar(255)
  activityId           String
  start_price_per_hour Decimal  @db.Decimal(10, 2)
  startTime            String   @db.VarChar(10)
  endTime              String   @db.VarChar(10)
  isAvailable          Boolean  @default(true)
  isFillingFast        Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  activity             Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  slots                Slot[]

  @@map("facilities")
}

enum SlotAvailability {
  locked
  available
  not_available
  booked
  filling_fast
}

enum BookingStatus {
  pending
  confirmed
  cancelled
  refunded
  failed
}

enum PaymentStatus {
  initiated
  paid
  failed
  refunded
}

model Slot {
  id           String            @id @default(uuid())
  date         DateTime          @db.Date
  amount       Decimal           @db.Decimal(10, 2)
  availability SlotAvailability  @default(available)
  startTime    String            @db.VarChar(10)
  endTime      String            @db.VarChar(10)
  facilityId   String
  bookingId    String?           // Foreign key to Booking (nullable until booked)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  facility     Facility          @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  booking      Booking?          @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("slots")
}

model Booking {
  id              String         @id @default(uuid())
  userId          String
  partnerId       String
  venueId         String
  activityId      String
  facilityId      String
  amount          Decimal        @db.Decimal(10, 2)
  duration        Int
  startTime       String         @db.VarChar(10)
  endTime         String         @db.VarChar(10)
  numberOfSlots   Int
  bookedDate      DateTime       @db.Date
  confirmedAt     DateTime?      @db.Date
  cancelledAt     DateTime?      @db.Date
  paymentDetails  Json?          @db.JsonB
  bookingStatus   BookingStatus  
  paymentStatus   PaymentStatus  
  customerDetails Json           @db.JsonB
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  slots           Slot[]         // One booking has many slots
  transaction     TransactionHistory?

  @@map("bookings")
}


model TransactionHistory {
  orderId           String    @db.VarChar(255) @id
  bookingId         String    @unique
  paymentAmount     Decimal   @db.Decimal(10, 2)
  paymentCurrency   String    @db.VarChar(3)
  paymentMethod     String    @db.VarChar(50)
  paymentDate       DateTime
  isRefunded        Boolean   @default(false)
  refundDate        DateTime?
  captured          Boolean?
  capturedAt        DateTime?
  razorpayPaymentId String?   @db.VarChar(255)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("transaction_history")
}